B-KOMPL:

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;


ENTITY bkomp IS PORT (
	b: IN std_logic_vector (1 downto 0);
	y: OUT std_logic_vector (1 downto 0)
	);
END bkomp;

ARCHITECTURE arch OF bkomp IS 

BEGIN
	y(1)<= not(b(1)) after 10 ns;
	y(0)<= not(b(0)) after 10 ns;
END arch;

DMUX:

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

ENTITY dmux IS PORT (

	x: IN std_logic_vector (1 downto 0);
	y: IN std_logic_vector (1 downto 0);
	s: IN std_logic;
	z: OUT std_logic_vector (1 downto 0)
	);
END dmux;



ARCHITECTURE arch OF dmux IS 
	
BEGIN
	z(1)<= ((x(1) and not s) or (y(1) and s)) after 10 ns;
	z(0)<= ((y(0) and s) or (x(0) and not s)) after 10 ns;

END arch;

FA:

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- warning: this file will not be saved if:
--     * following entity block contains any syntactic errors (e.g. port list isn't separated with ; character)
--     * following entity name and current file name differ (e.g. if file is named mux41 then entity must also be named mux41 and vice versa)
ENTITY fa IS PORT (
	a: IN std_logic_vector (1 downto 0);
	b: IN std_logic_vector (1 downto 0);
	cin: IN std_logic;
	r: OUT std_logic_vector (1 downto 0);
	cout: OUT std_logic
	);
END fa;

ARCHITECTURE arch OF fa IS 

BEGIN

r(1)<= ((not a(1) and b(1) and b(0) and not cin) or (a(1) and b(1) and not b(0) and cin) or (not a(1) and not a(0) and not b(1) and not b(0)) or (a(1) and not b(1) and b(0) and  not cin) or (a(1) and a(0) and not b(1) and b(0)) or (a(1) and not a(0) and b(1) and not b(0)) or (not a(1) and not a(0) and not b(1) and cin) or (a(1) and a(0) and not b(1) and not cin) or (a(1) and not a(0) and b(1) and cin) or (not a(1) and not b(1) and not b(0) and cin) or (not a(1) and a(0) and b(1) and b(0)) or (not a(1) and a(0) and b(1) and not cin)) after 10 ns;

r(0)<= ((a(0) and b(0) and not cin) or (not a(0) and not b(0) and not cin) or (not a(0) and b(0) and cin) or (a(0) and not b(0) and cin)) after 10 ns;

cout<= ((not a(0) and b(1) and not b(0)) or (not a(0) and b(1) and cin) or (a(1) and b(1)) or (a(1) and not a(0) and not b(0)) or (a(1) and not a(0) and cin) or (a(1) and not b(0) and cin) or (b(1) and not b(0) and cin)) after 10 ns;

END arch;

PRIMITIV:

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

ENTITY primitiv IS PORT (
    a: IN STD_LOGIC_VECTOR(1 DOWNTO 0);
    b: IN STD_LOGIC_VECTOR(1 DOWNTO 0);
    cin: IN STD_LOGIC;
    oper: IN STD_LOGIC;
    r: OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    cout: OUT STD_LOGIC      
);
END primitiv;

ARCHITECTURE arch OF primitiv IS 
     SIGNAL i,j: STD_LOGIC_VECTOR(1 DOWNTO 0); 
BEGIN
KOMPLEMENT: ENTITY WORK.bkomp PORT MAP(b(1 DOWNTO 0), i(1 DOWNTO 0));
MUX: ENTITY WORK.dmux PORT MAP(b(1 DOWNTO 0),i(1 DOWNTO 0), oper, j(1 DOWNTO 0));
ADDER: ENTITY WORK.fa PORT MAP(a(1 DOWNTO 0), j(1 DOWNTO 0), cin, r(1 DOWNTO 0), cout);
END arch;

ZBRAJALO:

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
ENTITY zbrajalo IS PORT (
	a: IN STD_LOGIC_VECTOR(7 DOWNTO 0);
   	b: IN STD_LOGIC_VECTOR(7 DOWNTO 0);
    	oper: IN STD_LOGIC;
   	r: OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
   	cout: OUT STD_LOGIC
	);
END zbrajalo;

ARCHITECTURE arch OF zbrajalo IS 
    SIGNAL i: STD_LOGIC_VECTOR(2 DOWNTO 0);
BEGIN
ADD0: ENTITY WORK.primitiv PORT MAP(a(1 DOWNTO 0), b(1 DOWNTO 0), oper, oper, r(1 DOWNTO 0), i(0));
ADD1: ENTITY WORK.primitiv PORT MAP(a(3 DOWNTO 2), b(3 DOWNTO 2), i(0), oper, r(3 DOWNTO 2), i(1));
ADD2: ENTITY WORK.primitiv PORT MAP(a(5 DOWNTO 4), b(5 DOWNTO 4), i(1), oper, r(5 DOWNTO 4), i(2));
ADD3: ENTITY WORK.primitiv PORT MAP(a(7 DOWNTO 6), b(7 DOWNTO 6), i(2), oper, r(7 DOWNTO 6), cout);
END arch;